-- Active: 1737627152580@@localhost@1521
alter session set container=CDB$ROOT;
--------------------------------------------------------------------------------
-- File Name    : test.sql
-- Description  : Solution for the test
-- Author       : Your Name
-- Date         : 2022-01-01
-- Last Modified: 2023-10-10  -- Update the date to reflect the latest change
-- Additional notes: Ensure the accuracy of the SQL commands previously executed.
-- Last Updated: 2023-10-12  -- Updated the last modified date after the recent changes
-- Next Steps: Review and validate SQL commands for correctness and efficiency.
---------------------------------------------------------------------------

--SQL*Plus: Release 23.0.0.0.0 - Production on Mon Feb 17 06:27:11 2025
--Version 23.6.0.24.10

--Copyright (c) 1982, 2024, Oracle.  All rights reserved.


--Connected to:
--Oracle Database 23ai Free Release 23.0.0.0.0 - Develop, Learn, and Run for Free
--Version 23.6.0.24.10

SQL> show con
concat "." (hex 2e)
SQL> show con_name

CON_NAME
------------------------------
CDB$ROOT
SQL> ALTER PLUGGABLE DATABASE FREEPDB1
  2  CLOSE IMMEDIATE;

Pluggable database altered.

SQL> ALTER PLUGGABLE DATABASE FREEPDB1
  2  OPEN RESTRICTED;

Pluggable database altered.

SQL> ALTER PLUGGABLE DATABASE FREEPDB1
  2  RENAME GLOBAL_NAME TO PDB26798;         

Pluggable database altered.

SQL> ALTER PLUGGABLE DATABASE PDB26798
  2  CLOSE;

Pluggable database altered.

SQL> ALTER PLUGGABLE DATABASE PDB26798
  2  OPEN;

Pluggable database altered.

SQL> ALTER PLUGGABLE DATABASE PDB26798 OPEN READ WRITE;
ALTER PLUGGABLE DATABASE PDB26798 OPEN READ WRITE
*
ERROR at line 1:
ORA-65019: pluggable database PDB26798 already open
Help: https://docs.oracle.com/error-help/db/ora-65019/


SQL> ALTER PLUGGABLE DATABASE PDB26798 
  2  OPEN READ WRITE;
ALTER PLUGGABLE DATABASE PDB26798
*
ERROR at line 1:
ORA-65019: pluggable database PDB26798 already open
Help: https://docs.oracle.com/error-help/db/ora-65019/


SQL> ALTER PLUGGABLE DATABASE PDB26798
  2  READ WRITE;
READ WRITE
*
ERROR at line 2:
ORA-00922: missing or invalid option
Help: https://docs.oracle.com/error-help/db/ora-00922/


SQL> ALTER SESSION SET CONTAINER = PDB26798;

Session altered.

SQL> SELECT name, open_mode FROM v$pdbs;

NAME
--------------------------------------------------------------------------------
OPEN_MODE
----------
PDB26798
READ WRITE


SQL> CREATE TABLE Authors (
    AuthorID NUMBER PRIMARY KEY,
    Name VARCHAR2(100) NOT NULL,
    Bio CLO  2    3    4  B
);  5                        
SQL> CREATE TABLE Authors (      
  2  AuthorID NUMBER PRIMARY KEY,
  3  Name VARCHAR2(100) NOT NULL,
  4  Bio CLOB
  5  );

Table created.

SQL> DROP TABLE Authors 
  2  ;

Table dropped.

SQL> SELECT * FROM ;
SELECT * FROM
             *
ERROR at line 1:
ORA-00903: invalid table name
Help: https://docs.oracle.com/error-help/db/ora-00903/


SQL> SELECT * FROM Authors;
SELECT * FROM Authors
              *
ERROR at line 1:
ORA-00942: table or view "SYS"."AUTHORS" does not exist
Help: https://docs.oracle.com/error-help/db/ora-00942/


SQL> CREATE TABLE Categories (
  2  categories_id  NUMBER GENERATED BY DEFAULT AS IDENTITY AS PRIMARY KEY,
  3              
SQL> CREATE TABLE Categories (
  2  category_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3  category_name  VARCHAR2(100) NOT NULL
  4  );

Table created.

SQL> CREATE TABLE Books (
  2  book_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3  title              VARCHAR2(200) NOT NULL,
  4  publication_year   NUMBER(4),
  5  category_id        NUMBER,
  6  price              NUMBER(8,2),
  7  rating             NUMBER(3,1),
  8  CONSTRAINT fk_books_category
  9     FOREIGN KEY (Category_id) REFERENCES Categories (category_id)
 10  );

Table created.

SQL> CREATE TABLE Authors (
  2  author_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3  name       VARCHAR2(150) NOT NULL,
  4  bio        CLOB 
  5  );

Table created.

SQL> CREATE TABLE BookAuthors (
  2  book_id    NUMBER,
  3  author_id  NUMBER,
  4  CONSTRAINT pk_bookauthors PRIMARY KEY (book_id, author_id),
  5  CONSTRAINT fk_ba_book FOREIGN KEY (book_id) REFERENCES Books(book_id),
  6  CONSTRAINT fk_ba_author FOREIGN KEY (author_id) REFERENCES Authors(author_id)
  7  );

Table created.

SQL> CREATE TABLE Members (
  2  member_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3  name               VARCHAR2(150) NOT NULL,
  4  email              VARCHAR2(150) UNIQUE,
  5  membership_date    DATE DEFAULT SYSDATE
  6  );

Table created.

SQL> CREATE TABLE MemberProfiles (
  2  member_id  NUMBER PRIMARY KEY,
  3  address    VARCHAR2(250),
  4  phone      VARCHAR2(20),
  5  CONSTRAINT fk_profile_member FOREIGN KEY (member_id) REFERENCES Members(member_id)
  6  );

Table created.

SQL> CREATE TABLE Loans (
  2  loan_id            NUMBER GENERATTED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3  book_id            NUMBER,
  4  member_id          NUMBER,
  5  loan_date          DATE DEFAULT SYSDATE,
  6  return_date        DATE,
  7  created_at         DATE DEFAULT SYSDATE,
  8  CONSTRAINT fk_loans_book FOREIGN KEY (book_id) REFERENCES Books(book_id),
  9  CONSTRAINT fk_loans_member FOREIGN KEY (member_id) REFERENCES Members(member_id)
 10  );
loan_id         NUMBER GENERATTED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       *
ERROR at line 2:
ORA-03062: missing comma or right parenthesis
Help: https://docs.oracle.com/error-help/db/ora-03062/


SQL> CREATE TABLE Loans (
    loan_id     NUMBER GENERA  2  TED BY DEFAULT AS IDENTITY PRIMARY KEY,
    book_i  3  d     NUMBER,
    member_id   NUMBER,
    loan_dat  4    5  e   DATE DEFAULT SYSDATE,
    return_date DATE,
    6    7    created_at  DATE DEFAULT SYSDATE,
    CONSTRAINT  8   fk_loans_book FOREIGN KEY (book_id) REFERENCES Books(book_id),
    CONSTRAINT fk_loans_member FOREI  9  GN KEY (member_id) REFERENCES Members(member_id)
) 10       
SQL> CREATE TABLE Loans (
  2  loan_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  3  book_id            NUMBER,
  4  member_id          NUMBER,
  5  loan_date          DATE DEFAULT SYSDATE,
  6  return_date        DATE,
  7  created_at         DATE DEFAULT SYSDATE,
  8  CONSTRAINT fk_loans_book FOREIGN KEY (book_id) REFERENCES Books(book_id),
  9  CONSTRAINT fk_laons_member FOREIGN KEY (member_id) REFERENCES Members(member_id)
 10  );

Table created.

SQL> CREATE USER bpacifique26798 IDENTIFIED BY "Euqificap12."
  2  QUOTA UNLIMITED ON USERS;

User created.

SQL> GRANT CREATE SESSION TO bpacifique26798;

Grant succeeded.

SQL> GRANT CREATE TABLE TO bpacifique26798;

Grant succeeded.

SQL> GRANT ALL PRIVILEGES TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON Categories TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON Books TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON Authors TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON BookAuthors TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON Members TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON MemberProfiles TO bpacifique26798;

Grant succeeded.

SQL> GRANT SELECT, INSERT, UPDATE, DELETE ON Loans TO bpacifique26798;

Grant succeeded.

SQL> INSERT INTO Categories (category_name) VALUES ('Technology');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Biography');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('History');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Self-Help');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Poetry');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Mystery');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Science Fiction');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Non-Fiction');

1 row created.

SQL> INSERT INTO Categories (category_name) VALUES ('Science');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('The Oracle of Delphi', 2018, 1, 29.99, 4.5);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('Learning SQL', 2020, 3, 39.99, 4.7);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('History of Rome', 2015, 2, 24.99, 4.3);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('Database Design Fundamentals', 2023, 4, 45.99, 4.8);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('Steve Jobs: The Biography', 2021, 5, 35.50, 4.9);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('World War II Chronicles', 2022, 6, 55.99, 4.6);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('Mindfulness in Practice', 2024, 7, 29.99, 4.2);

1 row created.

SQL> INSERT INTO Books (title, publication_year, category_id, price, rating)VALUES ('Modern Poetry Collection', 2023, 8, 19.99, 4.0);

1 row created.

SQL> COMMIT;

Commit complete.

SQL> INSERT INTO Authors (name, bio) VALUES ('Alice Walker', 'Author of various technical and literary works.');

1 row created.

SQL> INSERT INTO Authors (name, bio) VALUES ('Bob Smith', 'Historian and author.');

1 row created.

SQL> INSERT INTO Authors (name, bio) VALUES ('Sarah Johnson', 'Renowned technology author and researcher');

1 row created.

SQL> INSERT INTO Authors (name, bio) VALUES ('Michael Chang', 'Award-winning biographer'); 

1 row created.

SQL> INSERT INTO Authors (name, bio) VALUES ('Emily Roberts', 'Historical fiction specialist'); 

1 row created.

SQL> INSERT INTO Authors (name, bio) VALUES ('David Wilson', 'Self-help guru and motivational speaker');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (1, 1);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (2, 1);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (3, 2);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (4, 3);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (5, 4);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (6, 5);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (7, 6);

1 row created.

SQL> INSERT INTO BookAuthors (book_id, author_id) VALUES (8, 1);

1 row created.

SQL> COMMIT
  2  ;

Commit complete.

SQL> INSERT INTO Members (name, email) VALUES ('John Doe', 'john.doe@example.com');

1 row created.

SQL> INSERT INTO Members (name, email) VALUES ('Jane Smith', 'jane.smith@example.com');

1 row created.

SQL> INSERT INTO Members (name, email) VALUES ('Maria Garcia', 'maria.garcia@gmail.com');

1 row created.

SQL> INSERT INTO Members (name, email) VALUES ('James Wilson', 'jwilson@university.edu');

1 row created.

SQL> INSERT INTO Members (name, email) VALUES ('Sarah Chen', 'schen@company.org');

1 row created.

SQL> INSERT INTO Members (name, email) VALUES ('Ahmed Hassan', 'a.hassan@research.net');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> INSERT INTO MemberProfiles (member_id, address, phone) VALUES (1, '123 Main St', '555-1234');

1 row created.

SQL> INSERT INTO MemberProfiles (member_id, address, phone) VALUES (2, '456 Elm St', '555-5678');

1 row created.

SQL> INSERT INTO MemberProfiles (member_id, address, phone) VALUES (3, '789 Pine Boulevard, Boston, MA 02108', '555-9012');

1 row created.

SQL> INSERT INTO MemberProfiles (member_id, address, phone) VALUES (4, '321 University Ave, Cambridge, MA 02139', '555-3456');

1 row created.

SQL> INSERT INTO MemberProfiles (member_id, address, phone) VALUES (5, '567 Corporate Drive, New York, NY 10001', '555-7890');

1 row created.

SQL> INSERT INTO MemberProfiles (member_id, address, phone) VALUES (6, '890 Research Park, San Jose, CA 95110', '555-4321');

1 row created.

SQL> COMMIT;

Commit complete.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (1, 1, SYSDATE - 2, NULL, SYSDATE - 2);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (2, 1, SYSDATE - 6, SYSDATE - 1, SYSDATE - 6);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (3, 1, SYSDATE - 8, SYSDATE - 3, SYSDATE - 8);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (1, 2, SYSDATE - 1, NULL, SYSDATE - 1);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (2, 1, SYSDATE - 1, NULL, SYSDATE - 1);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (4, 3, SYSDATE - 3, NULL, SYSDATE - 3);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (5, 3, SYSDATE - 5, SYSDATE - 1, SYSDATE - 5);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (6, 4, SYSDATE - 15, SYSDATE - 8, SYSDATE - 15);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (7, 4, SYSDATE - 20, SYSDATE - 13, SYSDATE - 20);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (8, 5, SYSDATE - 10, SYSDATE - 3, SYSDATE - 10);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (1, 5, SYSDATE - 7, NULL, SYSDATE - 7);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (2, 5, SYSDATE - 4, NULL, SYSDATE - 4);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (3, 6, SYSDATE - 1, NULL, SYSDATE - 1);

1 row created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (4, 6, SYSDATE, NULL, SYSDATE);

1 row created.

SQL> COMMIT;

Commit complete.

SQL> DELETE FROM Authors WHERE author_id = 2;
DELETE FROM Authors WHERE author_id = 2
*
ERROR at line 1:
ORA-02292: integrity constraint (SYS.FK_BA_AUTHOR) violated - child record
found
Help: https://docs.oracle.com/error-help/db/ora-02292/


SQL> ^C

SQL> DELETE FROM BookAuthors WHERE author_id = 2;

1 row deleted.

SQL> DELETE FROM Authors WHERE author_id = 2;

1 row deleted.

SQL> COMMIT;

Commit complete.

SQL> SAVEPOINT before_loan;

Savepoint created.

SQL> INSERT INTO Loans (book_id, member_id, loan_date, return_date, created_at)VALUES (3, 2, SYSDATE, NULL, SYSDATE);

1 row created.

SQL> COMMIT;

Commit complete.

-- 1. Members with more than 3 loans
SELECT 
    m.member_id,
    m.name,
    m.email,
    COUNT(*) as loan_count
FROM Members m
JOIN Loans l ON m.member_id = l.member_id
GROUP BY m.member_id, m.name, m.email
HAVING COUNT(*) > 3;

-- 2. Books that have been loaned more than 3 times
SELECT 
    b.book_id,
    b.title,
    c.category_name,
    COUNT(*) as loan_count
FROM Books b
JOIN Loans l ON b.book_id = l.book_id
JOIN Categories c ON b.category_id = c.category_id
GROUP BY b.book_id, b.title, c.category_name
HAVING COUNT(*) > 3;

-- 3. Detailed view of transactions for entities with more than 3 loans
SELECT 
    m.member_id,
    m.name,
    b.title,
    l.loan_date,
    l.return_date,
    CASE 
        WHEN l.return_date IS NULL THEN 'Active'
        ELSE 'Returned'
    END as loan_status
FROM Members m
JOIN Loans l ON m.member_id = l.member_id
JOIN Books b ON l.book_id = b.book_id
WHERE m.member_id IN (
    SELECT member_id
    FROM Loans
    GROUP BY member_id
    HAVING COUNT(*) > 3
)
ORDER BY m.member_id, l.loan_date;
SQL> SELECT table_name
  2  FROM user_tables
  3  WHERE table_name IN ('BOOKS', 'CATEGORIES');

TABLE_NAME
--------------------------------------------------------------------------------
BOOKS
CATEGORIES

SQL> SELECT COUNT(*) FROM Books;

  COUNT(*)
----------
         8

SQL> SELECT COUNT(*) FROM Categories;

  COUNT(*)
----------
         9

SQL> SELECT b.book_id,       b.title,       c.category_name,       b.price,       b.ratingFROM Books bLEFT JOIN Categories c ON b.category_id = c.category_id;
SELECT b.book_id,       b.title,       c.category_name,       b.price,       b.ratingFROM Books bLEFT JOIN Categories c ON b.category_id = c.category_id
                                                                                                *
ERROR at line 1:
ORA-00923: FROM keyword not found where expected
Help: https://docs.oracle.com/error-help/db/ora-00923/


SQL> SELECT b.book_id,b.title, c.category_name, b.price, b.rating
  2  FROM Books b
  3  LEFT JOIN Categories c ON b.category_id = c.category_id;

   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         1
The Oracle of Delphi
Technology
     29.99        4.5


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         3
History of Rome
Biography
     24.99        4.3


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         2
Learning SQL
History
     39.99        4.7


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         4
Database Design Fundamentals
Self-Help
     45.99        4.8


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         5
Steve Jobs: The Biography
Poetry
      35.5        4.9


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         6
World War II Chronicles
Mystery
     55.99        4.6


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         7
Mindfulness in Practice
Science Fiction
     29.99        4.2


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_NAME
--------------------------------------------------------------------------------
     PRICE     RATING
---------- ----------
         8
Modern Poetry Collection
Non-Fiction
     19.99          4


8 rows selected.

SQL> SELECT*
  2
SQL> SELECT * 
  2  FROM Loans
  3  WHERE created_at >= SYSDATE - 7;

   LOAN_ID    BOOK_ID  MEMBER_ID LOAN_DATE RETURN_DA CREATED_A
---------- ---------- ---------- --------- --------- ---------
         1          1          1 15-FEB-25           15-FEB-25
         2          2          1 11-FEB-25 16-FEB-25 11-FEB-25
         4          1          2 16-FEB-25           16-FEB-25
         5          2          1 16-FEB-25           16-FEB-25
         6          4          3 14-FEB-25           14-FEB-25
         7          5          3 12-FEB-25 16-FEB-25 12-FEB-25
        12          2          5 13-FEB-25           13-FEB-25
        13          3          6 16-FEB-25           16-FEB-25
        14          4          6 17-FEB-25           17-FEB-25
        15          3          2 17-FEB-25           17-FEB-25

10 rows selected.

SQL> SELECT book_id, title, category_id, price, ratingFROM (    SELECT b.*,           ROW_NUMBER() OVER (PARTITION BY b.category_id ORDER BY b.price DESC) AS rn    FROM Books b) WHERE rn <= 5;
SELECT book_id, title, category_id, price, ratingFROM (    SELECT b.*,           ROW_NUMBER() OVER (PARTITION BY b.category_id ORDER BY b.price DESC) AS rn    FROM Books b) WHERE rn <= 5
                                                           *
ERROR at line 1:
ORA-00936: missing expression
Help: https://docs.oracle.com/error-help/db/ora-00936/


SQL> SELECT book_id, title, category_id, price, rating
  2  FROM (
  3     SELECT b.*,
  4             ROW_NUMBER() OVER (PARTITION BY b.category
  5
SQL> SAVEPOINT before_delete;

Savepoint created.

SQL> DELETE FROM Borrowings WHERE BorrowID = 8;
DELETE FROM Borrowings WHERE BorrowID = 8
            *
ERROR at line 1:
ORA-00942: table or view "SYS"."BORROWINGS" does not exist
Help: https://docs.oracle.com/error-help/db/ora-00942/


SQL> DELETE FROM Loans WHERE loan_id = 8;

1 row deleted.

SQL> ROLLBACK TO SAVEPOINT before_delete;

Rollback complete.

SQL> UPDATE Books
  2  SET title = 'The oracle at Delphi'
  3  WHERE book_id = 1;

1 row updated.

SQL> SELECT COUNT(*) FROM Books;

  COUNT(*)
----------
         8

SQL> SELECT category_id, COUNT(*) 
  2  FROM Books 
  3  GROUP BY category_id;

CATEGORY_ID   COUNT(*)
----------- ----------
          1          1
          3          1
          2          1
          4          1
          5          1
          6          1
          7          1
          8          1

8 rows selected.

SQL> SELECT book_id, title, category_id, price, rating
  2  FROM (
  3  SELECT b.*,
  4  ROW_NUMBER() OVER (PARTITION BY b.category_id ORDER BY b.price DESC) AS rn
  5  FROM Books b
  6  )
  7  WHERE rn <= 5;

   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_ID      PRICE     RATING
----------- ---------- ----------
         1
The oracle at Delphi
          1      29.99        4.5

         3
History of Rome
          2      24.99        4.3

   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_ID      PRICE     RATING
----------- ---------- ----------

         2
Learning SQL
          3      39.99        4.7

         4
Database Design Fundamentals

   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_ID      PRICE     RATING
----------- ---------- ----------
          4      45.99        4.8

         5
Steve Jobs: The Biography
          5       35.5        4.9

         6

   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_ID      PRICE     RATING
----------- ---------- ----------
World War II Chronicles
          6      55.99        4.6

         7
Mindfulness in Practice
          7      29.99        4.2


   BOOK_ID
----------
TITLE
--------------------------------------------------------------------------------
CATEGORY_ID      PRICE     RATING
----------- ---------- ----------
         8
Modern Poetry Collection
          8      19.99          4


8 rows selected.


   BOOK_ID TITLE                           CATEGORY_NAME       
  PRICE    RATING
__________ _______________________________ __________________ ________ _________
         1 The Oracle at Delphi            Technology          
  29.99       4.5
         3 History of Rome                 Biography           
  24.99       4.3
         2 Learning SQL                    History             
  39.99       4.7
         4 Database Design Fundamentals    Self-Help           
  45.99       4.8
         5 Steve Jobs: The Biography       Poetry              
   35.5       4.9
         6 World War II Chronicles         Mystery             
  55.99       4.6
         7 Mindfulness in Practice         Science Fiction       29.99       4.2
         8 Modern Poetry Collection        Non-Fiction         
  19.99         4

8 rows selected.


   BOOK_ID TITLE                           CATEGORY_NAME       
  PRICE    RATING
__________ _______________________________ __________________ ________ _________
         1 The Oracle at Delphi            Technology          
  29.99       4.5
         3 History of Rome                 Biography           
  24.99       4.3
         2 Learning SQL                    History             
  39.99       4.7
         4 Database Design Fundamentals    Self-Help           
  45.99       4.8
         5 Steve Jobs: The Biography       Poetry              
   35.5       4.9
         6 World War II Chronicles         Mystery             
  55.99       4.6
         7 Mindfulness in Practice         Science Fiction       29.99       4.2
         8 Modern Poetry Collection        Non-Fiction         
  19.99         4

8 rows selected.


   LOAN_ID    BOOK_ID    MEMBER_ID LOAN_DATE    RETURN_DATE    CREATED_AT
__________ __________ ____________ ____________ ______________ _____________
         1          1            1 15-FEB-25                   
15-FEB-25
         2          2            1 11-FEB-25    16-FEB-25      11-FEB-25
         4          1            2 16-FEB-25                   
16-FEB-25
         5          2            1 16-FEB-25                   
16-FEB-25
         6          4            3 14-FEB-25                   
14-FEB-25
         7          5            3 12-FEB-25    16-FEB-25      12-FEB-25
        12          2            5 13-FEB-25                   
13-FEB-25
        13          3            6 16-FEB-25                   
16-FEB-25
        14          4            6 17-FEB-25                   
17-FEB-25

9 rows selected.


   LOAN_ID    BOOK_ID    MEMBER_ID LOAN_DATE    RETURN_DATE    CREATED_AT
__________ __________ ____________ ____________ ______________ _____________
         1          1            1 15-FEB-25                   
15-FEB-25
         2          2            1 11-FEB-25    16-FEB-25      11-FEB-25
         4          1            2 16-FEB-25                   
16-FEB-25
         5          2            1 16-FEB-25                   
16-FEB-25
         6          4            3 14-FEB-25                   
14-FEB-25
         7          5            3 12-FEB-25    16-FEB-25      12-FEB-25
        12          2            5 13-FEB-25                   
13-FEB-25
        13          3            6 16-FEB-25                   
16-FEB-25
        14          4            6 17-FEB-25                   
17-FEB-25

9 rows selected.


   BOOK_ID TITLE                              CATEGORY_ID    PRICE    RATING
__________ _______________________________ ______________ ________ _________
         1 The Oracle at Delphi                         1    29.99       4.5
         3 History of Rome                              2    24.99       4.3
         2 Learning SQL                                 3    39.99       4.7
         4 Database Design Fundamentals                 4    45.99       4.8
         5 Steve Jobs: The Biography                    5     35.5       4.9
         6 World War II Chronicles                      6    55.99       4.6
         7 Mindfulness in Practice                      7    29.99       4.2
         8 Modern Poetry Collection                     8    19.99         4

8 rows selected.


   BOOK_ID TITLE                              CATEGORY_ID    PRICE    RATING
__________ _______________________________ ______________ ________ _________
         1 The Oracle at Delphi                         1    29.99       4.5
         3 History of Rome                              2    24.99       4.3
         2 Learning SQL                                 3    39.99       4.7
         4 Database Design Fundamentals                 4    45.99       4.8
         5 Steve Jobs: The Biography                    5     35.5       4.9
         6 World War II Chronicles                      6    55.99       4.6
         7 Mindfulness in Practice                      7    29.99       4.2
         8 Modern Poetry Collection                     8    19.99         4

8 rows selected.


   MEMBER_ID NAME           TOTAL_LOANS 
____________ ___________ ______________
           1 John Doe                 4


   MEMBER_ID NAME           TOTAL_LOANS
____________ ___________ ______________
           1 John Doe                 4


   BOOK_ID TITLE                      PUBLICATION_YEAR    CATEGORY_ID    PRICE    RATING
__________ _______________________ ___________________ ______________ ________ _________
         1 The Oracle at Delphi                   2018         
     1    29.99       4.5
         2 Learning SQL                           2020         
     3    39.99       4.7
         3 History of Rome                        2015         
     2    24.99       4.3


   MEMBER_ID NAME        EMAIL                      LOAN_COUNT 
____________ ___________ _______________________ _____________ 
           1 John Doe    john.doe@example.com                4 


no rows selected

   MEMBER_ID NAME        TITLE                   LOAN_DATE    RETURN_DATE    LOAN_STATUS
____________ ___________ _______________________ ____________ ______________ ______________
           1 John Doe    History of Rome         09-FEB-25    14-FEB-25      Returned
           1 John Doe    Learning SQL            11-FEB-25    16-FEB-25      Returned
           1 John Doe    The Oracle at Delphi    15-FEB-25                   Active
           1 John Doe    Learning SQL            16-FEB-25                   Active


   MEMBER_ID NAME        TITLE                   LOAN_DATE    RETURN_DATE    LOAN_STATUS
____________ ___________ _______________________ ____________ ______________ ______________
           1 John Doe    History of Rome         09-FEB-25    14-FEB-25      Returned
           1 John Doe    Learning SQL            11-FEB-25    16-FEB-25      Returned
           1 John Doe    The Oracle at Delphi    15-FEB-25                   Active
           1 John Doe    Learning SQL            16-FEB-25                   Active


Savepoint created.


1 row inserted.


Commit complete.


Commit complete.


Savepoint created.


1 row deleted.


Rollback complete.


Commit complete.


Commit complete.

SQL>



SQL> commit;

Commit complete.